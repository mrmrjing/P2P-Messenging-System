// protoc --proto_path=. --go_out=. --go_opt=paths=source_relative minichord.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.19.1
// source: minichord.proto

package minichord

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Registration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"` // Address of the peer that registers, must be acceptable by func Dial
}

func (x *Registration) Reset() {
	*x = Registration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minichord_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Registration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Registration) ProtoMessage() {}

func (x *Registration) ProtoReflect() protoreflect.Message {
	mi := &file_minichord_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Registration.ProtoReflect.Descriptor instead.
func (*Registration) Descriptor() ([]byte, []int) {
	return file_minichord_proto_rawDescGZIP(), []int{0}
}

func (x *Registration) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type RegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int32  `protobuf:"fixed32,2,opt,name=Result,proto3" json:"Result,omitempty"`
	Info   string `protobuf:"bytes,3,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *RegistrationResponse) Reset() {
	*x = RegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minichord_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationResponse) ProtoMessage() {}

func (x *RegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minichord_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationResponse.ProtoReflect.Descriptor instead.
func (*RegistrationResponse) Descriptor() ([]byte, []int) {
	return file_minichord_proto_rawDescGZIP(), []int{1}
}

func (x *RegistrationResponse) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *RegistrationResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type Deregistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32  `protobuf:"fixed32,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Address string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *Deregistration) Reset() {
	*x = Deregistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minichord_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deregistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deregistration) ProtoMessage() {}

func (x *Deregistration) ProtoReflect() protoreflect.Message {
	mi := &file_minichord_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deregistration.ProtoReflect.Descriptor instead.
func (*Deregistration) Descriptor() ([]byte, []int) {
	return file_minichord_proto_rawDescGZIP(), []int{2}
}

func (x *Deregistration) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Deregistration) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type DeregistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int32  `protobuf:"fixed32,2,opt,name=Result,proto3" json:"Result,omitempty"`
	Info   string `protobuf:"bytes,3,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeregistrationResponse) Reset() {
	*x = DeregistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minichord_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeregistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeregistrationResponse) ProtoMessage() {}

func (x *DeregistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minichord_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeregistrationResponse.ProtoReflect.Descriptor instead.
func (*DeregistrationResponse) Descriptor() ([]byte, []int) {
	return file_minichord_proto_rawDescGZIP(), []int{3}
}

func (x *DeregistrationResponse) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *DeregistrationResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type NodeRegistry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NR    uint32            `protobuf:"fixed32,4,opt,name=NR,proto3" json:"NR,omitempty"`
	Peers []*Deregistration `protobuf:"bytes,5,rep,name=Peers,proto3" json:"Peers,omitempty"` // Pair of Id and Address
	NoIds uint32            `protobuf:"fixed32,7,opt,name=NoIds,proto3" json:"NoIds,omitempty"`
	Ids   []int32           `protobuf:"fixed32,6,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *NodeRegistry) Reset() {
	*x = NodeRegistry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minichord_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRegistry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRegistry) ProtoMessage() {}

func (x *NodeRegistry) ProtoReflect() protoreflect.Message {
	mi := &file_minichord_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRegistry.ProtoReflect.Descriptor instead.
func (*NodeRegistry) Descriptor() ([]byte, []int) {
	return file_minichord_proto_rawDescGZIP(), []int{4}
}

func (x *NodeRegistry) GetNR() uint32 {
	if x != nil {
		return x.NR
	}
	return 0
}

func (x *NodeRegistry) GetPeers() []*Deregistration {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *NodeRegistry) GetNoIds() uint32 {
	if x != nil {
		return x.NoIds
	}
	return 0
}

func (x *NodeRegistry) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type NodeRegistryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result uint32 `protobuf:"fixed32,2,opt,name=Result,proto3" json:"Result,omitempty"`
	Info   string `protobuf:"bytes,3,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *NodeRegistryResponse) Reset() {
	*x = NodeRegistryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minichord_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRegistryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRegistryResponse) ProtoMessage() {}

func (x *NodeRegistryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minichord_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRegistryResponse.ProtoReflect.Descriptor instead.
func (*NodeRegistryResponse) Descriptor() ([]byte, []int) {
	return file_minichord_proto_rawDescGZIP(), []int{5}
}

func (x *NodeRegistryResponse) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *NodeRegistryResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type InitiateTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packets uint32 `protobuf:"fixed32,13,opt,name=Packets,proto3" json:"Packets,omitempty"`
}

func (x *InitiateTask) Reset() {
	*x = InitiateTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minichord_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiateTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateTask) ProtoMessage() {}

func (x *InitiateTask) ProtoReflect() protoreflect.Message {
	mi := &file_minichord_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateTask.ProtoReflect.Descriptor instead.
func (*InitiateTask) Descriptor() ([]byte, []int) {
	return file_minichord_proto_rawDescGZIP(), []int{6}
}

func (x *InitiateTask) GetPackets() uint32 {
	if x != nil {
		return x.Packets
	}
	return 0
}

type NodeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination int32   `protobuf:"fixed32,1,opt,name=Destination,proto3" json:"Destination,omitempty"`
	Source      int32   `protobuf:"fixed32,2,opt,name=Source,proto3" json:"Source,omitempty"`
	Payload     int32   `protobuf:"fixed32,3,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Hops        uint32  `protobuf:"fixed32,4,opt,name=Hops,proto3" json:"Hops,omitempty"`
	Trace       []int32 `protobuf:"fixed32,5,rep,packed,name=Trace,proto3" json:"Trace,omitempty"`
}

func (x *NodeData) Reset() {
	*x = NodeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minichord_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeData) ProtoMessage() {}

func (x *NodeData) ProtoReflect() protoreflect.Message {
	mi := &file_minichord_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeData.ProtoReflect.Descriptor instead.
func (*NodeData) Descriptor() ([]byte, []int) {
	return file_minichord_proto_rawDescGZIP(), []int{7}
}

func (x *NodeData) GetDestination() int32 {
	if x != nil {
		return x.Destination
	}
	return 0
}

func (x *NodeData) GetSource() int32 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *NodeData) GetPayload() int32 {
	if x != nil {
		return x.Payload
	}
	return 0
}

func (x *NodeData) GetHops() uint32 {
	if x != nil {
		return x.Hops
	}
	return 0
}

func (x *NodeData) GetTrace() []int32 {
	if x != nil {
		return x.Trace
	}
	return nil
}

type TaskFinished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32  `protobuf:"fixed32,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Address string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *TaskFinished) Reset() {
	*x = TaskFinished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minichord_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskFinished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFinished) ProtoMessage() {}

func (x *TaskFinished) ProtoReflect() protoreflect.Message {
	mi := &file_minichord_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFinished.ProtoReflect.Descriptor instead.
func (*TaskFinished) Descriptor() ([]byte, []int) {
	return file_minichord_proto_rawDescGZIP(), []int{8}
}

func (x *TaskFinished) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskFinished) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type RequestTrafficSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestTrafficSummary) Reset() {
	*x = RequestTrafficSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minichord_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTrafficSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTrafficSummary) ProtoMessage() {}

func (x *RequestTrafficSummary) ProtoReflect() protoreflect.Message {
	mi := &file_minichord_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTrafficSummary.ProtoReflect.Descriptor instead.
func (*RequestTrafficSummary) Descriptor() ([]byte, []int) {
	return file_minichord_proto_rawDescGZIP(), []int{9}
}

type TrafficSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32  `protobuf:"fixed32,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Sent          uint32 `protobuf:"fixed32,11,opt,name=Sent,proto3" json:"Sent,omitempty"`
	Relayed       uint32 `protobuf:"fixed32,12,opt,name=Relayed,proto3" json:"Relayed,omitempty"`
	Received      uint32 `protobuf:"fixed32,13,opt,name=Received,proto3" json:"Received,omitempty"`
	TotalSent     int64  `protobuf:"fixed64,14,opt,name=TotalSent,proto3" json:"TotalSent,omitempty"`
	TotalReceived int64  `protobuf:"fixed64,15,opt,name=TotalReceived,proto3" json:"TotalReceived,omitempty"`
}

func (x *TrafficSummary) Reset() {
	*x = TrafficSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minichord_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficSummary) ProtoMessage() {}

func (x *TrafficSummary) ProtoReflect() protoreflect.Message {
	mi := &file_minichord_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficSummary.ProtoReflect.Descriptor instead.
func (*TrafficSummary) Descriptor() ([]byte, []int) {
	return file_minichord_proto_rawDescGZIP(), []int{10}
}

func (x *TrafficSummary) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TrafficSummary) GetSent() uint32 {
	if x != nil {
		return x.Sent
	}
	return 0
}

func (x *TrafficSummary) GetRelayed() uint32 {
	if x != nil {
		return x.Relayed
	}
	return 0
}

func (x *TrafficSummary) GetReceived() uint32 {
	if x != nil {
		return x.Received
	}
	return 0
}

func (x *TrafficSummary) GetTotalSent() int64 {
	if x != nil {
		return x.TotalSent
	}
	return 0
}

func (x *TrafficSummary) GetTotalReceived() int64 {
	if x != nil {
		return x.TotalReceived
	}
	return 0
}

type MiniChord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*MiniChord_Registration
	//	*MiniChord_RegistrationResponse
	//	*MiniChord_Deregistration
	//	*MiniChord_DeregistrationResponse
	//	*MiniChord_NodeRegistry
	//	*MiniChord_NodeRegistryResponse
	//	*MiniChord_InitiateTask
	//	*MiniChord_NodeData
	//	*MiniChord_TaskFinished
	//	*MiniChord_RequestTrafficSummary
	//	*MiniChord_ReportTrafficSummary
	Message isMiniChord_Message `protobuf_oneof:"Message"`
}

func (x *MiniChord) Reset() {
	*x = MiniChord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minichord_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniChord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniChord) ProtoMessage() {}

func (x *MiniChord) ProtoReflect() protoreflect.Message {
	mi := &file_minichord_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniChord.ProtoReflect.Descriptor instead.
func (*MiniChord) Descriptor() ([]byte, []int) {
	return file_minichord_proto_rawDescGZIP(), []int{11}
}

func (m *MiniChord) GetMessage() isMiniChord_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *MiniChord) GetRegistration() *Registration {
	if x, ok := x.GetMessage().(*MiniChord_Registration); ok {
		return x.Registration
	}
	return nil
}

func (x *MiniChord) GetRegistrationResponse() *RegistrationResponse {
	if x, ok := x.GetMessage().(*MiniChord_RegistrationResponse); ok {
		return x.RegistrationResponse
	}
	return nil
}

func (x *MiniChord) GetDeregistration() *Deregistration {
	if x, ok := x.GetMessage().(*MiniChord_Deregistration); ok {
		return x.Deregistration
	}
	return nil
}

func (x *MiniChord) GetDeregistrationResponse() *DeregistrationResponse {
	if x, ok := x.GetMessage().(*MiniChord_DeregistrationResponse); ok {
		return x.DeregistrationResponse
	}
	return nil
}

func (x *MiniChord) GetNodeRegistry() *NodeRegistry {
	if x, ok := x.GetMessage().(*MiniChord_NodeRegistry); ok {
		return x.NodeRegistry
	}
	return nil
}

func (x *MiniChord) GetNodeRegistryResponse() *NodeRegistryResponse {
	if x, ok := x.GetMessage().(*MiniChord_NodeRegistryResponse); ok {
		return x.NodeRegistryResponse
	}
	return nil
}

func (x *MiniChord) GetInitiateTask() *InitiateTask {
	if x, ok := x.GetMessage().(*MiniChord_InitiateTask); ok {
		return x.InitiateTask
	}
	return nil
}

func (x *MiniChord) GetNodeData() *NodeData {
	if x, ok := x.GetMessage().(*MiniChord_NodeData); ok {
		return x.NodeData
	}
	return nil
}

func (x *MiniChord) GetTaskFinished() *TaskFinished {
	if x, ok := x.GetMessage().(*MiniChord_TaskFinished); ok {
		return x.TaskFinished
	}
	return nil
}

func (x *MiniChord) GetRequestTrafficSummary() *RequestTrafficSummary {
	if x, ok := x.GetMessage().(*MiniChord_RequestTrafficSummary); ok {
		return x.RequestTrafficSummary
	}
	return nil
}

func (x *MiniChord) GetReportTrafficSummary() *TrafficSummary {
	if x, ok := x.GetMessage().(*MiniChord_ReportTrafficSummary); ok {
		return x.ReportTrafficSummary
	}
	return nil
}

type isMiniChord_Message interface {
	isMiniChord_Message()
}

type MiniChord_Registration struct {
	Registration *Registration `protobuf:"bytes,17,opt,name=registration,proto3,oneof"`
}

type MiniChord_RegistrationResponse struct {
	RegistrationResponse *RegistrationResponse `protobuf:"bytes,18,opt,name=registrationResponse,proto3,oneof"`
}

type MiniChord_Deregistration struct {
	Deregistration *Deregistration `protobuf:"bytes,19,opt,name=deregistration,proto3,oneof"`
}

type MiniChord_DeregistrationResponse struct {
	DeregistrationResponse *DeregistrationResponse `protobuf:"bytes,20,opt,name=deregistrationResponse,proto3,oneof"`
}

type MiniChord_NodeRegistry struct {
	NodeRegistry *NodeRegistry `protobuf:"bytes,21,opt,name=nodeRegistry,proto3,oneof"`
}

type MiniChord_NodeRegistryResponse struct {
	NodeRegistryResponse *NodeRegistryResponse `protobuf:"bytes,22,opt,name=nodeRegistryResponse,proto3,oneof"`
}

type MiniChord_InitiateTask struct {
	InitiateTask *InitiateTask `protobuf:"bytes,23,opt,name=initiateTask,proto3,oneof"`
}

type MiniChord_NodeData struct {
	NodeData *NodeData `protobuf:"bytes,15,opt,name=nodeData,proto3,oneof"`
}

type MiniChord_TaskFinished struct {
	TaskFinished *TaskFinished `protobuf:"bytes,24,opt,name=taskFinished,proto3,oneof"`
}

type MiniChord_RequestTrafficSummary struct {
	RequestTrafficSummary *RequestTrafficSummary `protobuf:"bytes,25,opt,name=requestTrafficSummary,proto3,oneof"`
}

type MiniChord_ReportTrafficSummary struct {
	ReportTrafficSummary *TrafficSummary `protobuf:"bytes,26,opt,name=reportTrafficSummary,proto3,oneof"`
}

func (*MiniChord_Registration) isMiniChord_Message() {}

func (*MiniChord_RegistrationResponse) isMiniChord_Message() {}

func (*MiniChord_Deregistration) isMiniChord_Message() {}

func (*MiniChord_DeregistrationResponse) isMiniChord_Message() {}

func (*MiniChord_NodeRegistry) isMiniChord_Message() {}

func (*MiniChord_NodeRegistryResponse) isMiniChord_Message() {}

func (*MiniChord_InitiateTask) isMiniChord_Message() {}

func (*MiniChord_NodeData) isMiniChord_Message() {}

func (*MiniChord_TaskFinished) isMiniChord_Message() {}

func (*MiniChord_RequestTrafficSummary) isMiniChord_Message() {}

func (*MiniChord_ReportTrafficSummary) isMiniChord_Message() {}

var File_minichord_proto protoreflect.FileDescriptor

var file_minichord_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x6d, 0x69, 0x6e, 0x69, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x22, 0x28, 0x0a, 0x0c,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x42, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3a, 0x0a, 0x0e, 0x44, 0x65,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x44, 0x0a, 0x16, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f,
	0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x77, 0x0a, 0x0c,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x4e, 0x52, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x4e, 0x52, 0x12, 0x2f, 0x0a, 0x05,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69,
	0x6e, 0x69, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x2e, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x4e, 0x6f, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x4e, 0x6f,
	0x49, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0f,
	0x52, 0x03, 0x49, 0x64, 0x73, 0x22, 0x42, 0x0a, 0x14, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x28, 0x0a, 0x0c, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0f, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x07, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x04, 0x48, 0x6f, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x22, 0x38,
	0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x22, 0xae, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x04, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x10, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x10, 0x52, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x22, 0xc0, 0x06, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x69, 0x43, 0x68, 0x6f, 0x72, 0x64,
	0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x63, 0x68, 0x6f,
	0x72, 0x64, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x55, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x69, 0x6e, 0x69, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x64, 0x65, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x2e, 0x44, 0x65, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x16, 0x64,
	0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x69,
	0x6e, 0x69, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x2e, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x16, 0x64, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x14, 0x6e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x63, 0x68, 0x6f, 0x72,
	0x64, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x63, 0x68, 0x6f, 0x72, 0x64,
	0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52,
	0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x31, 0x0a,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x63, 0x68, 0x6f,
	0x72, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12,
	0x58, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x4f, 0x0a, 0x14, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x63, 0x68,
	0x6f, 0x72, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x21, 0x5a, 0x1f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6b, 0x79, 0x61, 0x73, 0x2f, 0x63, 0x61, 0x64, 0x70, 0x2f, 0x6d,
	0x69, 0x6e, 0x69, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_minichord_proto_rawDescOnce sync.Once
	file_minichord_proto_rawDescData = file_minichord_proto_rawDesc
)

func file_minichord_proto_rawDescGZIP() []byte {
	file_minichord_proto_rawDescOnce.Do(func() {
		file_minichord_proto_rawDescData = protoimpl.X.CompressGZIP(file_minichord_proto_rawDescData)
	})
	return file_minichord_proto_rawDescData
}

var file_minichord_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_minichord_proto_goTypes = []interface{}{
	(*Registration)(nil),           // 0: minichord.Registration
	(*RegistrationResponse)(nil),   // 1: minichord.RegistrationResponse
	(*Deregistration)(nil),         // 2: minichord.Deregistration
	(*DeregistrationResponse)(nil), // 3: minichord.DeregistrationResponse
	(*NodeRegistry)(nil),           // 4: minichord.NodeRegistry
	(*NodeRegistryResponse)(nil),   // 5: minichord.NodeRegistryResponse
	(*InitiateTask)(nil),           // 6: minichord.InitiateTask
	(*NodeData)(nil),               // 7: minichord.NodeData
	(*TaskFinished)(nil),           // 8: minichord.TaskFinished
	(*RequestTrafficSummary)(nil),  // 9: minichord.RequestTrafficSummary
	(*TrafficSummary)(nil),         // 10: minichord.TrafficSummary
	(*MiniChord)(nil),              // 11: minichord.MiniChord
}
var file_minichord_proto_depIdxs = []int32{
	2,  // 0: minichord.NodeRegistry.Peers:type_name -> minichord.Deregistration
	0,  // 1: minichord.MiniChord.registration:type_name -> minichord.Registration
	1,  // 2: minichord.MiniChord.registrationResponse:type_name -> minichord.RegistrationResponse
	2,  // 3: minichord.MiniChord.deregistration:type_name -> minichord.Deregistration
	3,  // 4: minichord.MiniChord.deregistrationResponse:type_name -> minichord.DeregistrationResponse
	4,  // 5: minichord.MiniChord.nodeRegistry:type_name -> minichord.NodeRegistry
	5,  // 6: minichord.MiniChord.nodeRegistryResponse:type_name -> minichord.NodeRegistryResponse
	6,  // 7: minichord.MiniChord.initiateTask:type_name -> minichord.InitiateTask
	7,  // 8: minichord.MiniChord.nodeData:type_name -> minichord.NodeData
	8,  // 9: minichord.MiniChord.taskFinished:type_name -> minichord.TaskFinished
	9,  // 10: minichord.MiniChord.requestTrafficSummary:type_name -> minichord.RequestTrafficSummary
	10, // 11: minichord.MiniChord.reportTrafficSummary:type_name -> minichord.TrafficSummary
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_minichord_proto_init() }
func file_minichord_proto_init() {
	if File_minichord_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_minichord_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Registration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minichord_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minichord_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deregistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minichord_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeregistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minichord_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRegistry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minichord_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRegistryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minichord_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiateTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minichord_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minichord_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskFinished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minichord_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTrafficSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minichord_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minichord_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniChord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_minichord_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*MiniChord_Registration)(nil),
		(*MiniChord_RegistrationResponse)(nil),
		(*MiniChord_Deregistration)(nil),
		(*MiniChord_DeregistrationResponse)(nil),
		(*MiniChord_NodeRegistry)(nil),
		(*MiniChord_NodeRegistryResponse)(nil),
		(*MiniChord_InitiateTask)(nil),
		(*MiniChord_NodeData)(nil),
		(*MiniChord_TaskFinished)(nil),
		(*MiniChord_RequestTrafficSummary)(nil),
		(*MiniChord_ReportTrafficSummary)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_minichord_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_minichord_proto_goTypes,
		DependencyIndexes: file_minichord_proto_depIdxs,
		MessageInfos:      file_minichord_proto_msgTypes,
	}.Build()
	File_minichord_proto = out.File
	file_minichord_proto_rawDesc = nil
	file_minichord_proto_goTypes = nil
	file_minichord_proto_depIdxs = nil
}
